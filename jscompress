#!/bin/bash

# the path to your java program to use
JAVA=java

# the location where closure-compiler Compressor is installed
COMPILER=~/bin/compiler.jar

###############################################################################
all=
outfile=
level=SIMPLE_OPTIMIZATIONS

function usage()
{
	echo "
Usage: `basename $0` [-h] [-all] [-o out] [-l level] file1 file2 ...

-all : All sub directory .js files to each Compress.
       Sub in file options are ignore.

-o   : Output file. using -o followed by its name. If no output file is
       specified, to each compress files.

-l   : Compilation Level
	1 : Whitespace only
	2 : Simple (default)
	3 : Advanced

Uses closure-compiler to minimize multiple JavaScript files and concatenate them into a
single file. The files are concatenated in the order they are received as parameters.

"
}

# read the options
while [[ "$1" == -* ]]; do
	case $1 in
		-all)
			all=1
			;;
		-h)
			usage;
			exit;
			;;
		-l)
			shift
			case $1 in
				1)
					level=WHITESPACE_ONLY
					;;
				2)
					level=SIMPLE_OPTIMIZATIONS
					;;
				3)
					level=ADVANCED_OPTIMIZATIONS
					;;
				*)
					level=SIMPLE_OPTIMIZATIONS
					;;
			esac
			;;
		-o)
			shift
			outfile=$1
			;;
	esac
	shift
done

# all file compile
if [ -n "$all" ]
then
	for f in `find . -type f -name '*.js'`
	do
		echo "Compile : $f"
		out=$f"_$(date +%s)"
		"$JAVA" -jar "$COMPILER" --compilation_level "$level" --js "$f" --js_output_file "$out"
		mv -f $out $f
	done
	exit;
fi

# files check
if [ $# -lt 1 ]
then
	echo "File is required."
	usage;
	exit 1
fi

if [ -n "$outfile" ]; then
	echo "Compile : $outfile"
	rm -f "$outfile"
	js=
	for f in "$@"; do
		[ ! -f "$f" ] && continue;
		js=$js" --js $f"
	done
	param="-jar $COMPILER $js --compilation_level $level --js_output_file $outfile"
	"$JAVA" $param
else
	for f in "$@"; do
		[ ! -f "$f" ] && continue;
		echo "Compile : $f"
		out=$f"_$(date +%s)"
		"$JAVA" -jar "$COMPILER" --compilation_level "$level" --js "$f" --js_output_file "$out"
		mv -f $out $f
	done
fi
